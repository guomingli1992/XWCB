//
//  SearchResultsViewController.m
//  AePubReader
//
//  Created by Federico Frappi on 05/05/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "IYCSearchResultsViewController.h"
#import "IYCSearchResult.h"
#import "UIWebView+SearchWebView.h"
#import "IYCChapter.h"
#import "RTLabel.h"
#import "IYCCommon.h"
#import "IYCSecurityManager.h"
#import "IYCColor.h"
#import "UIColor+Hex.h"
@interface IYCSearchResultsViewController() 


- (void) searchString:(NSString *)query inChapterAtIndex:(int)index;

@end


@implementation IYCSearchResultsViewController
@synthesize delegate;
@synthesize resultsTableView, epubViewController, currentQuery, results;

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier];
    }
    
    cell.textLabel.adjustsFontSizeToFitWidth = YES;
    
    IYCSearchResult* hit = (IYCSearchResult*)[results objectAtIndex:[indexPath row]];
    
    UILabel *pageLabel = (UILabel*)[cell viewWithTag:200];
    if (!pageLabel)
    {
        pageLabel = [[UILabel alloc] initWithFrame:CGRectMake(14, 10, 60, 23)];
        pageLabel.font = [UIFont boldSystemFontOfSize:10];
        pageLabel.backgroundColor = [UIColor clearColor];
        pageLabel.tag = 200;
    
        pageLabel.textColor = [UIColor colorWithHexString:textMainColor];
        [cell addSubview: pageLabel];
    
    }
    UIImageView *image = (UIImageView*)[cell viewWithTag:202];
    if (!image)
    {
        image = [[UIImageView alloc] initWithFrame:CGRectMake(78, 13, 1, 17)];
        [image setImage:[UIImage imageNamed:@"cut-line.png"]];
        image.tag = 202;
        [cell addSubview: image];
        
    }
    UIImageView *image2 = (UIImageView*)[cell viewWithTag:203];
    if (!image2)
    {
        image2 = [[UIImageView alloc] initWithFrame:CGRectMake(14, 42, WIDTH1-28, 2)];
        [image2 setImage:[UIImage imageNamed:@"dot-line.png"]];
        image2.tag = 203;
        [cell addSubview: image2];
        
    }
    pageLabel.text = [NSString stringWithFormat:@"page %d", hit.pageIndex+1];
   
    NSRange range = [hit.neighboringText rangeOfString:self.currentQuery];
    if (range.length == 0) {
        range.location = 0;
    }
    int location = (int)range.location;

    int length = (int)range.length;
    NSString *stringHead = [hit.neighboringText substringToIndex:location];
    NSString *stringBody = [hit.neighboringText substringWithRange:range];
    NSString *stringFoot = [hit.neighboringText substringFromIndex:location+length];
    NSString *text = [NSString stringWithFormat:@"<font face='HelveticaNeue-CondensedBold' size=12 color='#000000'>%@</font> <font face=AmericanTypewriter size=12 color=red>%@</font> <font face=Futura size=12 color='#000000'>%@</font>",stringHead,stringBody,stringFoot];

    
    RTLabel *contentLabel = (RTLabel*)[cell viewWithTag:201];
    if (!contentLabel)
    {
        contentLabel = [[RTLabel alloc] initWithFrame:CGRectMake(104, 13, WIDTH1-120, 23)];
        [contentLabel setBackgroundColor:[UIColor clearColor]];
        contentLabel.tag = 201;
        [contentLabel setParagraphReplacement:@""];
        [cell addSubview: contentLabel];
        
    }
    [contentLabel setText:text];
    cell.backgroundColor = [UIColor clearColor];
    return cell;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return [self.results count];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
   IYCSearchResult* hit = (IYCSearchResult*)[results objectAtIndex:[indexPath row]];

    if (delegate && [delegate respondsToSelector:@selector(loadSpine: atPageIndex: highlightSearchResult:)]) {
        [delegate loadSpine:hit.chapterIndex atPageIndex:hit.pageIndex highlightSearchResult:hit];
    }
    
}

- (void) searchString:(NSString*)query{
    NSMutableArray *result = [[NSMutableArray alloc] init];
    self.results = result;
    [resultsTableView reloadData];
    self.currentQuery=query;
    
    [self searchString:query inChapterAtIndex:0];    
}

- (void) searchString:(NSString *)query inChapterAtIndex:(int)index{
    
    currentChapterIndex = index;
    
    IYCChapter* chapter = [epubViewController.chapters objectAtIndex:index];
    
    NSRange range = NSMakeRange(0, chapter.text.length);
    range = [chapter.text rangeOfString:query options:NSCaseInsensitiveSearch range:range locale:nil];
    int hitCount=0;
    while (range.location != NSNotFound) {
        range = NSMakeRange(range.location+range.length, chapter.text.length-(range.location+range.length));
        range = [chapter.text rangeOfString:query options:NSCaseInsensitiveSearch range:range locale:nil];
        hitCount++;
    }
    CGRect frame = CGRectZero;
    
    frame=CGRectMake(0,0, WIDTH1, HEIGHT1);

//    if ([self getCurrentScreenType] == 4) {
//        frame = CGRectMake(0, 50, 320, 380);
//    } else {
//        frame = CGRectMake(0, 50, 320, 468);
//    }
    if(hitCount!=0){
        UIWebView* webView = [[UIWebView alloc] initWithFrame:frame];
        [webView setDelegate:self];
        NSString* html = nil;
        if (chapter.bookId == 0)
        {
            html = [IYCCommon decodeBase64forFile:chapter.spinePath];
        }
        else
        {
            IYCSecurityManager *manager = [[IYCSecurityManager alloc] init];
            html = [manager decryptWithFilePath:chapter.spinePath];
        }
        [webView loadHTMLString:html baseURL:[NSURL fileURLWithPath:chapter.basePath isDirectory:YES]];
    } else {
        if((currentChapterIndex+1)<[epubViewController.chapters count] && [results count] < 200){
            [self searchString:currentQuery inChapterAtIndex:(currentChapterIndex+1)];
        } else {
            
            if (delegate && [delegate respondsToSelector:@selector(searchFinished:)]) {
                [delegate searchFinished:(int)[results count]];
            }
        }
    }
}

- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error{
}

- (void) webViewDidFinishLoad:(UIWebView*)webView{    
    [webView highlightAllOccurencesOfString:currentQuery];
    
    NSString* foundHits = [webView stringByEvaluatingJavaScriptFromString:@"results"];
    
  
    
    NSMutableArray* objects = [[NSMutableArray alloc] init];
    
    NSArray* stringObjects = [foundHits componentsSeparatedByString:@";"];
    for(int i=0; i<[stringObjects count]; i++){
        NSArray* strObj = [[stringObjects objectAtIndex:i] componentsSeparatedByString:@","];
        if([strObj count]==3){
            [objects addObject:strObj];   
        }
    }
    
    NSArray* orderedRes = [objects sortedArrayUsingComparator:^(id obj1, id obj2){
                                            int x1 = [[obj1 objectAtIndex:0] intValue];
                                            int x2 = [[obj2 objectAtIndex:0] intValue];
                                            int y1 = [[obj1 objectAtIndex:1] intValue];
                                            int y2 = [[obj2 objectAtIndex:1] intValue];
                                            if(y1<y2){
                                                return NSOrderedAscending;
                                            } else if(y1>y2){
                                                return NSOrderedDescending;
                                            } else {
                                                if(x1<x2){
                                                    return NSOrderedAscending;
                                                } else if (x1>x2){
                                                    return NSOrderedDescending;
                                                } else {
                                                    return NSOrderedSame;
                                                }
                                            }
    }];
    
    
    for(int i=0; i<[orderedRes count]; i++){
        NSArray* currObj = [orderedRes objectAtIndex:i];
        int pageNum = 0;
        for (int i = 0; i< currentChapterIndex ; i++) {
           IYCChapter *chapter = [epubViewController.chapters objectAtIndex:i];
            DebugLog(@"%d",chapter.pageCount);
            pageNum = pageNum + chapter.pageCount;
            
            
        }
        IYCSearchResult* searchRes = [[IYCSearchResult alloc] initWithChapterIndex:currentChapterIndex pageIndex:(pageNum+[[currObj objectAtIndex:1] intValue]/HEIGHT1) hitIndex:0 neighboringText:[webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"unescape('%@')", [currObj objectAtIndex:2]]] originatingQuery:currentQuery];
        [results addObject:searchRes];
    }
    
    [resultsTableView performSelectorOnMainThread:@selector(reloadData) withObject:nil waitUntilDone:NO];
    if((currentChapterIndex+1)<[epubViewController.chapters count] && [self.results count] < 200){
        [self searchString:currentQuery inChapterAtIndex:(currentChapterIndex+1)];
    } else {
        if (delegate && [delegate respondsToSelector:@selector(searchFinished:)]) {
            [delegate searchFinished:(int)[results count]];
        }
    }
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}


- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    self.resultsTableView = nil;
}
- (int)getCurrentScreenType {
    if ( [UIScreen mainScreen].bounds.size.height > 500) {
        return 5;
    }
    
    return 4;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

@end
